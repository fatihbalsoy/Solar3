/*
 *   orbit_points.ts
 *   solar-system-3js
 * 
 *   Created by Fatih Balsoy on 4/30/23
 *   Copyright Â© 2023 Fatih Balsoy. All rights reserved.
 */

import * as THREE from "three"
import Planet from "../objects/planet"
import { Settings } from "../settings"

/**
 * Represents an orbital path in three-dimensional space.
 */
export interface Orbit {
    /** The name of the planet in which the orbit belongs to. */
    name: string
    /** The size of the points array. */
    length: number
    /** An array of three-dimensional points that define the path of the orbit. */
    points: THREE.Vector3[]
}

export class Orbits {

    /**
     * Parses the given data to generate the required points 
     * needed to add an orbital path onto the scene for the specified planet.
     * 
     * @param data The string of data generated by `calculate_orbits.ts`.
     * @param planet The planet to search and generate an orbit for. 
     * @returns An `Orbit` type that contains the points needed to generate an orbital path.
     */
    parseData(data: string, planet: string): Orbit {
        var orbit: Orbit

        // - Get planets and their line numbers - //
        let fileLines = data.split("\n")
        // let fileDate = new Date(fileLines[0])
        let planetNames = fileLines[1].split(",")
        let planetIndex = fileLines[2].split(",")

        // Determine the index of the specified planet in the list
        let i = planetNames.indexOf(planet)
        // Get the name of the planet and check whether it is a valid value
        let p = planetNames[i]
        if (p) {
            let name = planetNames[i].toLowerCase()
            let index = parseInt(planetIndex[i])

            // Get length of vectors specified at the planet's index (first line)
            let length = parseInt(fileLines[index - 1])
            // Create a string array of the planet's orbit vectors from the given 
            // location in the data using index and length.
            let vLines: string[] = fileLines.slice(index, index + length)

            // Convert lines of string into an array of three.js vectors
            var vectors: THREE.Vector3[] = []
            for (let v = 0; v < vLines.length; v++) {
                let element = vLines[v];
                let coords: string[] = element.split(",")

                // Parse each string as a float and scale it for the scene, 
                // accounting for the distance compression when generating the data.
                let x = parseFloat(coords[0]) * Settings.AUtoKM * Settings.distanceScale
                let y = parseFloat(coords[1]) * Settings.AUtoKM * Settings.distanceScale
                let z = parseFloat(coords[2]) * Settings.AUtoKM * Settings.distanceScale

                let vector = new THREE.Vector3(x, y, z)
                vectors.push(vector)
            }

            orbit = {
                name: name,
                length: vectors.length,
                points: vectors
            }
        }

        return orbit
    }

    /**
     * Fetches and adds orbital paths to specified planets within a given scene.
     * 
     * @param planets An array of Planet objects to which orbits will be added.
     * @param scene The THREE.js scene to which orbits will be added.
     */
    addOrbits(planets: Planet[], scene: THREE.Scene) {
        fetch('data/orbit_points.txt')
            .then(response => response.text())
            .then(data => {
                for (let c in planets) {
                    let planet = planets[c]
                    if (planet.id) {
                        let orbit = this.parseData(data, planet.name)
                        planet.displayOrbit(orbit, scene)
                    }
                }
            })
    }
}